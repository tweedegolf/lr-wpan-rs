use crate::time::Duration;

use super::{ConfirmValue, Request, RequestValue, Status};

/// The MLME-CALIBRATE.request primitive attempts to have the PHY respond with RMARKER offset
/// information. The MLME-CALIBRATE.request primitive shall be implemented by RDEVs.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct CalibrateRequest {
    // Intentionally empty
}

impl From<RequestValue> for CalibrateRequest {
    fn from(value: RequestValue) -> Self {
        match value {
            RequestValue::Calibrate(val) => val,
            _ => panic!("Bad cast"),
        }
    }
}

impl Request for CalibrateRequest {
    type Confirm = CalibrateConfirm;
}

/// The MLME-CALIBRATE.confirm primitive reports the result of a request to the PHY to provide internal
/// propagation path information. The MLME-CALIBRATE.confirm primitive shall be implemented by
/// RDEVs.
///
/// The MLME-CALIBRATE.confirm primitive is generated by the MLME and issued to its next higher layer
/// in response to a MLME-CALIBRATE.request primitive.
///
/// If the feature is supported, the MLME issues the MLME-CALIBRATE.confirm primitive with a status of
/// SUCCESS.
///
/// If the MLME-CALIBRATE.request primitive is received when there is no information present, e.g., when
/// the PHY is in the process of performing a measurement, the status parameter will be set to NO_DATA.
///
/// If the PHY does not support autonomous self-calibration, the status parameter will be set to a value of
/// COMPUTATION_NEEDED. This indicates to the next higher layer that it should use the sounding
/// primitives to finish the calibration.
///
/// If the channel sounding capability is not present in the PHY, the status parameter will be set to a value of
/// UNSUPPORTED_ATTRIBUTE.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct CalibrateConfirm {
    pub status: Status,
    pub cal_tx_rmarker_offset: Duration,
    pub cal_rx_rmarker_offset: Duration,
}

impl From<ConfirmValue> for CalibrateConfirm {
    fn from(value: ConfirmValue) -> Self {
        match value {
            ConfirmValue::Calibrate(val) => val,
            _ => panic!("Bad cast"),
        }
    }
}
