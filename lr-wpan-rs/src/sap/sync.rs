use super::{DynamicRequest, Indication, IndicationValue, Request, RequestValue, SecurityInfo};
use crate::wire::PanId;

/// The MLME-SYNC.request primitive requests to synchronize with the coordinator by acquiring and, if
/// specified, tracking its beacons.
///
/// If the MLME-SYNC.request primitive is received by the MLME on a beacon-enabled PAN, it will first set
/// phyCurrentPage and phyCurrentChannel equal to the values of the ChannelPage and ChannelNumber
/// parameters, respectively. If the TrackBeacon parameter is equal to TRUE, the MLME will track the beacon,
/// i.e., enable its receiver just before the expected time of each beacon so that the beacon frame can be
/// processed. If the TrackBeacon parameter is equal to FALSE, the MLME will locate the beacon but not
/// continue to track it.
///
/// If this primitive is received by the MLME while it is currently tracking the beacon, the MLME will not
/// discard the primitive but will treat it as a new synchronization request.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct SyncRequest {
    /// The channel number on which to attempt coordinator synchronization.
    pub channel_number: u8,
    /// The channel page on which to attempt coordinator synchronization.
    pub channel_page: u8,
    /// TRUE if the MLME is to synchronize with the
    /// next beacon and attempts to track all future
    /// beacons. FALSE if the MLME is to synchronize with only the next beacon.
    pub track_beacon: bool,
}

impl From<RequestValue> for SyncRequest {
    fn from(value: RequestValue) -> Self {
        match value {
            RequestValue::Sync(val) => val,
            _ => panic!("Bad cast"),
        }
    }
}

impl DynamicRequest for SyncRequest {
    type Confirm = ();
    type AllocationElement = core::convert::Infallible;
}

impl Request for SyncRequest {}

/// The MLME-SYNC-LOSS.indication primitive indicates the loss of synchronization with a coordinator.
///
/// The MLME-SYNC-LOSS.indication primitive is generated by the MLME of a device and issued to its next
/// higher layer in the event of a loss of synchronization with the coordinator. It is also generated by the MLME
/// of the PAN coordinator and issued to its next higher layer in the event of either a PAN ID conflict or an
/// overlap between the outgoing superframe and the incoming superframe, as described in 5.1.1.2.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct SyncLossIndication {
    pub loss_reason: LossReason,
    /// The PAN identifier with which the device
    /// lost synchronization or to which it was
    /// realigned.
    pub pan_id: PanId,
    pub channel_number: u8,
    pub channel_page: u8,
    pub security_info: SecurityInfo,
}

impl From<IndicationValue> for SyncLossIndication {
    fn from(value: IndicationValue) -> Self {
        match value {
            IndicationValue::SyncLoss(val) => val,
            _ => panic!("Bad cast"),
        }
    }
}

impl Indication for SyncLossIndication {
    type Response = ();
}

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub enum LossReason {
    /// The device has detected a PAN identifier conflict and has communicated it
    /// to the PAN coordinator or the PAN coordinator has received a PAN ID conflict notification command
    /// regarding a device that is associated with it, as described in 5.1.2.2.
    PanIdConflict,
    /// The device has received the coordinator realignment command from the coordinator
    /// through which it is associated and the MLME was not carrying out an orphan scan, as
    /// described in 5.1.2.3.3.
    Realignment,
    /// The device has missed too many beacons, as described in 5.1.4.1.
    BeaconLost,
    /// The device has received a coordinator realignment comment from its
    /// coordinator that would cause the incoming and outgoing superframes to overlap, as described in
    /// 5.1.1.2.
    SuperframeOverlap,
}
