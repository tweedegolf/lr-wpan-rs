use super::{ConfirmValue, Request, RequestValue, Status};
use crate::pib::PibValue;

/// The MLME-SET.request primitive attempts to write the given value to the indicated PIB attribute.
///
/// On receipt of the MLME-SET.request primitive, the MLME checks to see whether the PIB attribute is a
/// MAC PIB attribute or a PHY PIB attribute. If the requested attribute is a MAC attribute, the MLME
/// attempts to write the given value to the indicated MAC PIB attribute. If the requested attribute is a PHY
/// attribute, the MLME attempts to write the given value to the indicated PHY PIB attribute.
#[derive(Debug, Clone, PartialEq)]
pub struct SetRequest {
    /// The name of the PIB attribute to write.
    pub pib_attribute: &'static str,
    /// The value to write to the indicated PIB attribute.
    pub pib_attribute_value: PibValue,
}

impl From<RequestValue> for SetRequest {
    fn from(value: RequestValue) -> Self {
        match value {
            RequestValue::Set(val) => val,
            _ => panic!("Bad cast"),
        }
    }
}

impl Request for SetRequest {
    type Confirm = SetConfirm;
}

/// The MLME-SET.confirm primitive reports the results of an attempt to write a value to a PIB attribute.
///
/// The MLME-SET.confirm primitive is generated by the MLME and issued to its next higher layer in
/// response to an MLME-SET.request primitive. The MLME-SET.confirm primitive returns a status of either
/// SUCCESS, indicating that the requested value was written to the indicated PIB attribute or with the status
/// parameter set as follows:
///
/// - READ_ONLY – The PIBAttribute parameter specifies an attribute that is a read-only attribute.
/// - UNSUPPORTED_ATTRIBUTE – The PIBAttribute parameter specifies an attribute that was not
///   found in the database.
/// - INVALID_PARAMETER – The PIBAttributeValue parameter specifies a value that is out of the
///   valid range for the given attribute.
///
/// If the PIBAttribute parameter indicates that macBeaconPayloadLength is to be set and the length of the
/// resulting beacon frame exceeds aMaxPHYPacketSize (e.g., due to the additional overhead required for
/// security processing), the MAC sublayer shall not update macBeaconPayloadLength and will issue the
/// MLME-GET.confirm primitive with a status of INVALID_PARAMETER.
#[derive(Debug, Clone, PartialEq)]
pub struct SetConfirm {
    pub status: Status,
    /// The name of the PIB attribute that was written.
    pub pib_attribute: &'static str,
}

impl From<ConfirmValue> for SetConfirm {
    fn from(value: ConfirmValue) -> Self {
        match value {
            ConfirmValue::Set(val) => val,
            _ => panic!("Bad cast"),
        }
    }
}
