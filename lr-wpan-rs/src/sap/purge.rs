use super::{ConfirmValue, DynamicRequest, Request, RequestValue, Status};

/// The MCPS-PURGE.request primitive allows the next higher layer to purge an MSDU from the transaction queue.
///
/// On receipt of the MCPS-PURGE.request primitive, the MAC sublayer attempts to find in its transaction
/// queue the MSDU indicated by the msduHandle parameter. If an MSDU has left the transaction queue, the
/// handle will not be found, and the MSDU can no longer be purged. If an MSDU matching the given handle is
/// found, the MSDU is discarded from the transaction queue.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct PurgeRequest {
    /// The handle of the MSDU to be purged from the transaction queue.
    pub msdu_handle: u8,
}

impl From<RequestValue> for PurgeRequest {
    fn from(value: RequestValue) -> Self {
        match value {
            RequestValue::Purge(val) => val,
            _ => panic!("Bad cast"),
        }
    }
}

impl DynamicRequest for PurgeRequest {
    type Confirm = PurgeConfirm;
    type AllocationElement = core::convert::Infallible;
}

impl Request for PurgeRequest {
}

/// The MCPS-PURGE.confirm primitive allows the MAC sublayer to notify the next higher layer of the
/// success of its request to purge an MSDU from the transaction queue.
///
/// The MCPS-PURGE.confirm primitive is generated by the MAC sublayer entity in response to an MCPS-PURGE.request primitive.
/// If an MSDU matching the given handle is found, the status will be set to
/// SUCCESS. If an MSDU matching the given handle is not found, the status will be set to
/// INVALID_HANDLE.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct PurgeConfirm {
    pub msdu_handle: u8,
    pub status: Status,
}

impl From<ConfirmValue> for PurgeConfirm {
    fn from(value: ConfirmValue) -> Self {
        match value {
            ConfirmValue::Purge(val) => val,
            _ => panic!("Bad cast"),
        }
    }
}
