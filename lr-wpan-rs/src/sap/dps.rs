use super::{
    ConfirmValue, DynamicRequest, Indication, IndicationValue, Request, RequestValue, Status,
};
use crate::time::Duration;

/// The MLME-DPS.request primitive allows the next higher layer to request that the PHY utilize a given pair
/// of preamble codes for a single use pending expiration of the DPSIndexDuration.
///
/// This primitive may also be generated to cancel a previously generated request to enable the transmitter and
/// receiver dynamic preambles. The use of the index for the transmitter and receiver is enabled or disabled
/// exactly once per primitive request.
///
/// The MLME starts the timer that assures that the device returns to a normal operating state with default
/// preambles if a following MCPS-DATA.request primitive does not occur. After starting the timer, the
/// MLME responds with a MLME-DPS.confirm primitive with the appropriate status parameter.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct DpsRequest {
    /// The index value for the transmitter. A value of 0 disables
    /// the index and indicates that the phyCurrentCode value is
    /// to be used, as defined in 14.2.5.1. Other values indicate
    /// the preamble code, as defined in Table 103.
    ///
    /// Valid range: 0, 13–16, 21–24
    pub tx_dps_index: u8,
    /// The index value for the receiver. A value of 0 disables the
    /// index and indicates that the phyCurrentCode value is to
    /// be used, as defined in 14.2.5.1. Other values indicate the
    /// preamble code, as defined in Table 103.
    ///
    /// Valid range: 0, 13–16, 21–24
    pub rx_dps_index: u8,
    /// The number of symbols for which the transmitter and
    /// receiver will utilize the respective DPS indices if a
    /// MCPS-DATA.request primitive is not issued.
    pub dps_index_duration: Duration,
}

impl From<RequestValue> for DpsRequest {
    fn from(value: RequestValue) -> Self {
        match value {
            RequestValue::Dps(val) => val,
            _ => panic!("Bad cast"),
        }
    }
}

impl DynamicRequest for DpsRequest {
    type Confirm = DpsConfirm;
    type AllocationElement = core::convert::Infallible;
}

impl Request for DpsRequest {}

/// The MLME-DPS.confirm primitive reports the results of the attempt to enable or disable the DPS.
///
/// The MLME-DPS.confirm primitive is generated by the MLME and issued to its next higher layer in
/// response to an MLME-DPS.request primitive.
///
/// If any parameter in the MLME-DPS.request primitive is not supported or is out of range, the status of
/// DPS_NOT_SUPPORTED is returned. If the request to enable or disable the DPS was successful, the
/// MLME issues the MLME-DPS.confirm primitive with a status of SUCCESS.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct DpsConfirm {
    pub status: Status,
}

impl From<ConfirmValue> for DpsConfirm {
    fn from(value: ConfirmValue) -> Self {
        match value {
            ConfirmValue::Dps(val) => val,
            _ => panic!("Bad cast"),
        }
    }
}

/// The MLME-DPS.indication primitive indicates the expiration of the DPSIndexDuration and the resetting of
/// the DPS values in the PHY.
///
/// If a MCPS-DATA.request primitive is not received before the timer expires, the MLME issues the MLME-DPS.indication
/// primitive to the next higher layer.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct DpsIndication {
    // Intentionally empty
}

impl From<IndicationValue> for DpsIndication {
    fn from(value: IndicationValue) -> Self {
        match value {
            IndicationValue::Dps(val) => val,
            _ => panic!("Bad cast"),
        }
    }
}

impl Indication for DpsIndication {
    type Response = ();
}
