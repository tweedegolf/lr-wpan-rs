use super::{ConfirmValue, Request, RequestValue, SecurityInfo, Status};
use crate::wire::Address;

/// The MLME-POLL.request primitive prompts the device to request data from the coordinator.
///
/// On receipt of the MLME-POLL.request primitive, the MLME requests data from the coordinator, as
/// described in 5.1.6.3. If the poll is directed to the PAN coordinator, the data request command may be
/// generated without any destination address information present. Otherwise, the data request command is
/// always generated with the destination address information in the CoordPANId and CoordAddress
/// parameters.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct PollRequest {
    /// The address of the coordinator to which the poll is intended.
    pub coord_address: Address,
    pub security_info: SecurityInfo,
}

impl From<RequestValue> for PollRequest {
    fn from(value: RequestValue) -> Self {
        match value {
            RequestValue::Poll(val) => val,
            _ => panic!("Bad cast"),
        }
    }
}

impl Request for PollRequest {
    type Confirm = PollConfirm;
}

/// The MLME-POLL.confirm primitive reports the results of a request to poll the coordinator for data.
///
/// The MLME-POLL.confirm primitive is generated by the MLME and issued to its next higher layer in
/// response to an MLME-POLL.request primitive. If the request was successful, the status parameter will be
/// equal to SUCCESS, indicating a successful poll for data. Otherwise, the status parameter indicates the
/// appropriate error code. The status values are fully described in 6.2.14.1.
///
/// If the Frame Pending field of the acknowledgment frame is set to zero, the MLME will issue the MLME-
/// POLL.confirm primitive with a status of NO_DATA.
///
/// If a frame is received from the coordinator with a zero length payload or if the frame is a MAC command
/// frame, the MLME will issue the MLME-POLL.confirm primitive with a status of NO_DATA. If a frame is
/// received from the coordinator with nonzero length payload, the MLME will issue the MLME-
/// POLL.confirm primitive with a status of SUCCESS. In this case, the actual data are indicated to the next
/// higher layer using the MCPS-DATA.indication primitive, as described in 6.3.3.
///
/// If a frame is not received within macMaxFrameTotalWaitTime even though the acknowledgment to the data
/// request command has its Frame Pending field set to one, the MLME will issue the MLME-POLL.confirm
/// primitive with a status of NO_DATA.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct PollConfirm {
    pub status: Status,
}

impl From<ConfirmValue> for PollConfirm {
    fn from(value: ConfirmValue) -> Self {
        match value {
            ConfirmValue::Poll(val) => val,
            _ => panic!("Bad cast"),
        }
    }
}
