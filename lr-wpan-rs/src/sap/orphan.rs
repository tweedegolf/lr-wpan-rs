use super::{Indication, IndicationValue, ResponseValue, SecurityInfo};
use crate::wire::{ExtendedAddress, ShortAddress};

/// The MLME-ORPHAN.indication primitive is generated by the MLME of a coordinator and issued to its
/// next higher layer on receipt of an orphan notification command, as defined in 5.3.6.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct OrphanIndication {
    /// The address of the orphaned device.
    pub orphan_address: ExtendedAddress,
    pub security_info: SecurityInfo,
}

impl From<IndicationValue> for OrphanIndication {
    fn from(value: IndicationValue) -> Self {
        match value {
            IndicationValue::Orphan(val) => val,
            _ => panic!("Bad cast"),
        }
    }
}

impl Indication for OrphanIndication {
    type Response = OrphanResponse;
}

/// The MLME-ORPHAN.response primitive allows the next higher layer of a coordinator to respond to the
/// MLME-ORPHAN.indication primitive.
///
/// If the AssociatedMember parameter is set to TRUE, the orphaned device is associated with the coordinator.
/// In this case, the MLME generates and sends the coordinator realignment command, as defined in 5.3.8, to
/// the orphaned device containing the value of the ShortAddress field. This command is sent in the CAP if the
/// coordinator is on a beacon-enabled PAN or immediately otherwise. If the AssociatedMember parameter is
/// set to FALSE, the orphaned device is not associated with the coordinator and this primitive will be ignored.
/// If the orphaned device does not receive the coordinator realignment command following its orphan
/// notification within macResponseWaitTime, it will assume it is not associated to any coordinator in range.
///
/// If the frame was successfully transmitted and an acknowledgment was received, if requested, the MAC
/// sublayer will issue the MLME-COMM-STATUS.indication primitive with a status of SUCCESS.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct OrphanResponse {
    /// The address of the orphaned device.
    pub orphan_address: ExtendedAddress,
    /// The short address allocated to the orphaned device if
    /// it is associated with this coordinator. The special short
    /// address 0xfffe indicates that no short address was
    /// allocated, and the device will use its extended address
    /// in all communications. If the device was not associated with this coordinator, this field will contain the
    /// value 0xffff and be ignored on receipt.
    pub short_address: ShortAddress,
    /// TRUE if the orphaned device is associated with this
    /// coordinator or FALSE otherwise.
    pub associated_member: bool,
    pub security_info: SecurityInfo,
}

impl From<ResponseValue> for OrphanResponse {
    fn from(value: ResponseValue) -> Self {
        match value {
            ResponseValue::Orphan(val) => val,
            _ => panic!("Bad cast"),
        }
    }
}
